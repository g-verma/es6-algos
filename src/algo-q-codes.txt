//run num length
var str = "abcc";
var obj={};
for(var i =0; i<str.length;i++){
    if(obj[str.charAt(i)]){
        obj[str.charAt(i)] = obj[str.charAt(i)]+1;
    }
    else{
        obj[str.charAt(i)] = 1;
    }
}
console.log(obj);



// smallest subarray with sum greater than given sum , time complexity O(n), can also calulate negative numbers
const __smallWi = (arr, n, x) =>{
    var currSum = 0,
     minlen = n+1,
     start = 0, 
     end = 0;

     while(end < n){
        while (currSum <= x && end < n) {
            if (currSum <= 0 && x > 0) 
            { 
                start = end; 
                currSum = 0; 
            } 
  
            currSum += arr[end++]; 
        }

        while(currSum > x && start < n) {
            if (end - start < minlen) 
                minlen = end - start; 
            currSum -= arr[start++]; 
        }
     }
    
     return minlen; 

}

var arri = [- 8, 1, 4, 2, -6];
var x =6;
console.log('smallest subarray having sum greater than sum: ', __smallWi(arri,arri.length, x));



//staircase problem
const __stair = n =>{
    if(n == 1 || n == 0)
        return 1;
    else if(n == 2 )
         return 2;
    else {   
         var output= __stair(n-1) + __stair(n-2) + __stair(n-3);
       return output;
    }
}
console.log("ways to climb: ", __stair(4));  //output : 4



//second max rep char
const secMaxRep = arr =>{
    var fr = 0,
    sec = 0,
    obj = {},
    len = arr.length;
    

    for(var i = 0; i < len; i++){
        if(obj[arr[i]])
            obj[arr[i]] = obj[arr[i]] + 1;
        else
            obj[arr[i]] = 1;
    }

    fr = Object.keys(obj)[0];
    sec = Object.keys(obj)[1];
    for(var key in obj){
        if(obj[key]>obj[fr]){  // checking whose count is greater
            sec = fr;
            fr = key;
        }   
        else if(obj[key]>obj[sec] && obj[key]!=obj[fr]){
            sec = key;
        }
    }
    return sec;
}

var str = "abaccc";  // here 'c' is first most repeative and 'a' is 2nd most repeative;
console.log("Second MF Charater is : ",secMaxRep(str));



//stack
class Stack{
   
    constructor(){
      this.items = [];
      this.push = this.push.bind( this );
    }

    push( item ) {
      this.items.push( item );
    }
    
    pop() {
      this.items.pop();
    }

    showStack() {
      for( let i = 0; i < this.items.length; i = i + 1 ){
        console.log( this.items[ i ] );
      }
    }
    
  }
  
  var stack = new Stack();
  
  stack.push(10);
  stack.push(20);
  stack.push(30);
  stack.showStack();

 console.log( stack.items );



