
//num length
var arr = [];
var istr = "abcdaaddb";
var rmdup = [];

istr.split("").forEach(function(item){
    var tempobj ={
        char: item,
        count: 1
    }

    var tempindex = rmdup.indexOf(item);

    if(tempindex == -1){
        rmdup.push(item);
        arr.push(tempobj);
    }else{
        arr[tempindex]["count"] = arr[tempindex]["count"] + 1;
    }

})

var str = "";
arr.forEach(function(obj){
    str = str + obj['char'] + obj['count'];
})

console.log("dupp: ",str);



//remove dup
const __rrd = str => {
    var ostr = str.split('');
    var count = 1;

    for(var i=1; i < ostr.length; i++ ){
        for(var j=0; j < count; j++){
            if(ostr[i] == ostr[j]) 
                break;
        }
        if(j === count){
            ostr[count] = ostr[i];
            ++count;
        }
    }

    ostr.length = count;
    return ostr;
}



var ystr = "dssss"
console.log(__rrd(ystr));


//remove dup using obj
const __rdnew = str => {
    var ostr = str.split('');
    var obj = {};
    
    for(var i=0; i < ostr.length; i++ ){
         obj[ostr[i]] = "";
    }
    return Object.keys(obj);
}

var ystr = "dssss"
console.log("using object", __rdnew(ystr));



//char num length
const __repk = str => {
    
    var result = [];
    var repChar = {};

    for (var i=0; i<str.length; i++){
        var char = str[i];
        repChar[char] = repChar[char] >=1 ? repChar[char] + 1 : 1;
        if (repChar[char] === 2){
            result.push(char);
        }
    }

    return repChar;
}
var inputStr = "abcda";
console.log(__repk(inputStr));



// num length
const __fr = str =>{
    var arr = {};

    for (var i=0; i<str.length; i++){
        var char = str.charAt(i);

        if(arr[char])
            arr[char]++;
        else
            arr[char] = 1; // if not duplicate set value 1

    }

    return arr;
}

var inputString = "abccdd";
console.log("num length : ", __fr(inputString));




//num length new
const __df = str =>{
    var output = {};

    for(var i=0; i < str.length; i++){
        if(output[str.charAt(i)]){
            output[str.charAt(i)] = output[str.charAt(i)] + 1;
        }else{
            output[str.charAt(i)] = 1;
        }
    }

    return output;
}
var ist = "abcc"
console.log(__df(ist));




// duplicates in string
const __repk = str => {
    var len = str.length;
    var result = [];
    var repChar = {};

    for (var i=0; i<len; i++){
        var char = str[i];
        repChar[char] = repChar[char] >=1 ? repChar[char] + 1 : 1;
        if (repChar[char] === 2){
            result.push(char);
            
        }
    }

    return result
}
var inputStr = "abcab";
console.log(__repk(inputStr));



//num length
var str = "abcc";
var obj={};
for(var i =0; i<str.length;i++){
    if(obj[str.charAt(i)]){
        obj[str.charAt(i)] = obj[str.charAt(i)]+1;
    }
    else{
        obj[str.charAt(i)] = 1;
    }
}
console.log(obj);




//first rep letter
const __frep = str =>{
    var len = str.length;
    var count = 0;

    for(var i = 0; i < len; i++){
        for(var j = 1+i; j < len; j++){
            if(str[i] === str[j]){
              return str[i];
            }    
        }
    }
}

var instr = "acddca";
console.log("frep", __frep(instr));



//sub array max kedene's algo
const __mx = arr =>{
    var c = 0;
    var gs = arr[0];

    for(var i =0; i < arr.length; i++){
        c = arr[i] > c + arr[i] ? arr[i] : c + arr[i];
        gs = gs > c ? gs : c; 
    }
    return gs;
}
var iarr = [1,2,3,-2,7,-1];
console.log("cgs max subarr: ",__mx(iarr));




//rev string
const __rev = string =>{
    let result = "";
    for (let ch of string){
        result = ch + result;
    }
        return result;
};

var testStr = "hello";
console.log(" rev : ", __rev(testStr));



//rev integer
const __rev = num =>{
    var ss = num.toString();
    
    let result = "";
    for (let ch of ss){
        result = ch + result;
    }
        return result;
};

var testStr = 12345;
console.log(" rev : ", __rev(testStr));




//non repeative    
const __nonrep = str => {
    var char = {};

    for (let i = 0; i < str.length; i++) {
        if (char[str[i]]) {
            char[str[i]] ++;
        } else {
            char[str[i]] = 1;
        }
    }
    for (let i = 0; i < str.length; i++) {
        if (char[str[i]] === 1) {
            return str[i];
        }
    }
}
var inputString = "abbaz";
console.log("First Non-Repeating char is: ", __nonrep(inputString));



//pali
const __pali = string => {
    var slen = string.length;
    for(var i=0; i < slen / 2; i++){
        if(string[i] !== string[slen - i - 1])
        return false;
    }
    return true;
}

var pstr = "kanak";
console.log("Pali is : ",__pali(pstr));




//normal fibbi
const __fb = (num) => {
    if(num == 0 || num <=1)
      return num;
    else{
      return  __fb(num - 1) + __fb(num - 2) ;
    }
}
console.log("fb is: ", __fb(10));


//fibbi with memo
const fb = (num,temp) => {
    
  if(temp[num])
    return temp[num];
    
  if(num == 0 || num <=1)
    return num;
  else{
    return temp[num] = fb(num - 1, temp) + fb(num - 2, temp);
  }
    
}
console.log("with memo: ",fb(10,[]));




// duplicate strings
const __duplen = istr =>{
var arr = [];
var rmdup = [];

istr.split("").forEach(item=>{
    var tempobj ={
        char: item,
        count: 1
    }

    var tempindex = rmdup.indexOf(item);

    if(tempindex == -1){
        rmdup.push(item);
        arr.push(tempobj);
    }else{
        arr[tempindex]["count"] = arr[tempindex]["count"] + 1;
    }

})

    var str = "";
    arr.forEach(obj =>{
        str = str + obj['char'] + obj['count'];
    })

    return str;
}

var istr = "abca";
console.log("dupp: ",__duplen(istr));


//playing with Object
var redd = [1,2,4,5];
var ff = ["apple","banana","butter"]
var somp = "this is example"

var mop ={
    char: "hehehe",
    count: 1
}


var barr = [];
var newarr = [];

barr.push(mop);
console.log("inserting obj in array: ",barr);


var last = ff[ff.length - 2]
console.log("array last item : ", last);


mop["count"] = mop["count"] + 1;
console.log("mop count updated: ", mop.count);


console.log("indexOf redd integer : ", redd.lastIndexOf(4)); // here 4 is element
console.log("indexOf somp: ", somp.indexOf(7));   // as 7 is not there in array so showing -1



const __obIn = () => {

    for (let i = 0; i < 5; i++) {
           barr.push(mop);
    }
    return barr;          
}

console.log("updated barr: ", __obIn());



//smallst min 
const __ssmin = arr => {
    var lowest = 0;

    for (var i = 1; i < arr.length; i++) {
     if (arr[i] < arr[lowest]) {
            lowest = i;
        }
    }
    return lowest;
   }

var narr = [5, 8, 15, 10, 200, 1];
console.log("index of smallest : ", __ssmin(narr));

//stack 
class Stack{
   
    constructor(){
      this.items = [];
      this.push = this.push.bind( this );
    }

    push( item ) {
      this.items.push( item );
    }
    
    pop() {
      this.items.pop();
    }

    peek() {
        console.log( 'Stack.peek()' );
        console.log(this.items.splice( this.items.length - 1, 1 )[0] );
      }
    printStack() {
      for( let i = 0; i < this.items.length; i = i + 1 ){
        console.log( this.items[ i ] );
      }
    }
    
  }
  
  var stack = new Stack();
  
  stack.push(10);
  stack.push(20);
  stack.push(30);
  
 stack.printStack();
 stack.peek();
 console.log( stack.items );



//singly linked list

class  Node{
    constructor(value,next){
        this.value = value;
        this.next = next;
    }
}


class LinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
    }

    addToHead(value){
        var node = new Node(value,null);

        if(this.head){
           node.next = this.head;
        }else{
            this.tail = node;
        }
        this.head = node;
    }

    addToTail(value){
        var node = new Node(value,null);

        if(this.tail){
            this.tail.next = node;

        }else{ 
            this.head = node;
        }
        
        this.tail = node;
      }

    showList(){
        if(!this.head) 
            return null;

        var current = this.head;
        var listy = [];

        while(current){
          listy += "âž”"+ current.value;
         
          current = current.next;
        }
        
        console.log(listy); // returning linked list 
      }     
      
      
   remove(value) {
      let current = this.head;

      //first node remove
      if (current.value === value) {
        this.head = current.next;
      } else {
        let previous = current;
        while (current.next) {
      
          // middle value remove
          if (current.value === value) {
            previous.next = current.next;
            break;
          }

          previous = current;
          current = current.next;
        }
        // last node remove
        if (current.value === value) {
          previous.next = null;
        }
      }

    }

}


  const list = new LinkedList();
  
  list.addToHead(1)
  list.addToHead(5) 

  list.remove(5);

  list.addToTail(123)
  list.addToTail(503)
  
  list.addToHead(100)
  list.showList();








// Greatest product is either (min1 * min2 * max1 || max1 * max2 * max3)
computeProduct = unsorted => {
    
  sortIntegers = (a, b) => {
        return a - b;
  }

  var sortedArray = unsorted.sort(sortIntegers),
    product1 = 1,
    product2 = 1,
  
    array_n_element = sortedArray.length - 1;

    for (var i = array_n_element; i > array_n_element - 3; i--) {
      product1 = product1 * sortedArray[i];
  }

  product2 = sortedArray[0] * sortedArray[1] * sortedArray[array_n_element];

  if (product1 > product2){ 
    return product1;
  }

  return product2;
}
var unsortedArray = [1,2,3,-8];
console.log("largest product yielded from following integers: ", computeProduct(unsortedArray)); // 21000



//linear search
const __ls = (arr,el) =>{
    var len = arr.length;
    var flag = false;

    for(var i = 0; i < len -1; i++){
        if(arr[i] == el ){
            flag = true;
            break;
        }
    }

    if(flag)
        return true;
    else
        return false;
}

var inarr = [5,4,7,8,6,2,1];
var ee = 5;
console.log(__ls(inarr,ee));




//quick sort
const qc = arr => {
  var len = arr.length;
  
  if (len < 2) return arr;

  var countr = arr[0];

  var ls = [];
  var gr = [];

  for (var i = 1; i < len; i++) {
    if (arr[i] < countr) {
      ls.push(arr[i]);
    } else {
      gr.push(arr[i]);
    }
  }

  
  return [...qc(ls), countr, ...qc(gr)];
};

var array = [5,8,4,7,2];
console.log(qc(array));




// sorted bbs
const __bsrt = arr =>{
    var done = true;

    for(var i=0; i< arr.length; i++){
      for(var j=0; j<arr.length; j++){       
            if(arr[j] > arr[j+1]){
                
                var temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp;
                done = false;
            }
        }
        if(done) return;
        
    }

    return arr;    
}

var inparr = [188, 5, 8, 1, 2, 15, 3];
console.log("sorted Bs: ", __bsrt(inparr));




// diff in arrfunction arr_diff (a1, a2) {

    var a = [], diff = [];

    for (var i = 0; i < a1.length; i++) {
        a[a1[i]] = true;
    }

    for (var i = 0; i < a2.length; i++) {
        if (a[a2[i]]) {
            delete a[a2[i]];
        } else {
            a[a2[i]] = true;
        }
    }

    for (var k in a) {
        diff.push(k);
    }

    return diff;
}

console.log(arr_diff(['a', 'b'], ['a', 'b', 'c']));




//IIFunctions
//syntax    ;(function(){}) ();

;(function(){
})();

;!function(){
}();

;-function(){
}();

;+function(){
}();

;~function(){
}();


//subset sum
const __subSum = (arr, el) =>{

    var len = arr.length;
    var obj = {}; // a blank object
    var count = 0;
    var currentSum = 0;

    for(var i = 0; i<len; i++){
        currentSum = arr[i];

        if(currentSum == el){
            count++;
        }

        if(obj.hasOwnProperty(currentSum-el)){
            count += obj[currentSum-el];
        }

        obj[currentSum] = obj.hasOwnProperty(currentSum) ? obj[currentSum] + 1 : 1;

    }
    
    return count;
}
var inarr = [10,2,-2,-20,10];
var sumToSearch = -10;
console.log(__subSum(inarr, sumToSearch));

const __stc = num =>{
    const mxb = num;
    const mxf = num;
    var strl = [];
    for(var i = 0; i<mxf; i++){
        let skpb = mxb-i-1;
        let strbl = [];
        for(var j=0; j<mxb; j++){
           if(skpb>0) 
                strbl.push(' ')
           else
                strbl.push('#')
        skpb--
        }
        strl.push(strbl)
    }
    console.log(strl);
    for(let k of strl){
        console.log(k.join(''))
    }

    return;
}

var nums = 5;
console.log(__stc(nums))


//reverse a string with spread
function reverse(str){
    return [...str].reverse().join('  ');
  }
console.log(reverse("hello"));

//strcase 
const __stc = n =>{
    for(var i = 1; i < n; i++){
        console.log(' '.repeat(n - i) + '#'.repeat(i));        
    }
}

__stc(5);




const __stcase = n => {
    for (let i = 1; i <= n; i++) {
        let output = []
        let j = 0;
    for( ; j<n-i; j++){
        output.push(' ');
    }
    for(;j<n;j++){
        output.push('#');
    }
    console.log(output.join(''))
  }
}

__stcase(4);




//pyramd
function printN(n) {
    var hash = '';
  
    for (var i = 0; i <= n; i++) {
      hash += '#';
      console.log(hash);
    }
  }
  
  printN(6);
  
//strcs 
  function staircase(n) {
    for (let i = 1; i <= n; i++) {
      console.log(' '.repeat(n - i) + '#'.repeat(i));
    }
  }
  
  staircase(8);
  
  
  //strcase with recursion
  function staircase(n, string) {
    string = string || '';
    if (n > 0) {
      string += "#";
      console.log(string);
      this.staircase(n - 1, string);
    }
  }
  
  
  
  function chestBoard(size) {
    var board = '';
    for (var y = 0; y < size; y++) {
      for (var x = 0; x < size; x++) {
        if ((x + y) % 2 === 0)
          board += ' ';
        else
          board += '#';
      }
      board += '\n';
    }
    console.log(board);
  }
chestBoard(8);
  
//staircase combinations using dynamic programming 
const __stc = n =>{   //complexity is O(n)
    var res = [n];  //[n+1] is not required
    res[0] = 1;
    res[1] = 1;
    res[2] = 2;

    for(var i = 3; i <= n; i++){
        res[i] = res[i-1] + res[i-2] + res[i-3];
    }
    return res[n];
}
console.log(__stc(3));  // input 3, output 4 :: input 4, ouput 7


//staircase using recursive, time complexity is exponentional
const __fstep = n =>{

    if (n == 1 || n == 0)  
        return 1; 
    else if (n == 2)  
        return 2; 
    else 
        return __fstep(n - 3) + __fstep(n - 2) + __fstep(n - 1);  
}
console.log('ways to climb: ', __fstep(4));  // input 3, output 4 :: input 4, ouput 7




// smallest subarray with sum greater than given sum , time complexity O(n), can also calulate negative numbers
const __smallWi = (arr, n, x) =>{
    var currSum = 0,
     minlen = n+1,
     start = 0, 
     end = 0;

     while(end < n){
        while (currSum <= x && end < n) {
            if (currSum <= 0 && x > 0) 
            { 
                start = end; 
                currSum = 0; 
            } 
  
            currSum += arr[end++]; 
        }

        while(currSum > x && start < n) {
            if (end - start < minlen) 
                minlen = end - start; 
            currSum -= arr[start++]; 
        }
     }
    
     return minlen; 

}

var arri = [- 8, 1, 4, 2, -6];
var x =6;
console.log('smallest subarray having sum greater than sum: ', __smallWi(arri,arri.length, x));




//Count the subarrays having product less than k
const __sumLessK = (a, k)  =>{
    p = 1, 
    res = 0,
    start = 0,
    end =0;

    for (start ; end < a.length ; end++) { 
  
        p *= a[end]; 
          
        while (start < end && p >= k)  
            p /= a[start++];         
         
        if (p < k) { 
           var len = end-start+1; 
            res += len; 
        } 
    } 
  
    return res; 
} 
var arrin = [1, 2, 3, 4];   //output is 7
console.log("product of sum less than k is:", __sumLessK(arrin, 10));



//sum of subarray
function getMaxSubSum(arr) {
    let maxSum = 0;
    let partialSum = 0;
  
    for (let item of arr) { // for each item of arr
      partialSum += item; // add it to partialSum
      maxSum = Math.max(maxSum, partialSum); // remember the maximum
      if (partialSum < 0) partialSum = 0; // zero if negative
    }
  
    return maxSum;
  }
  
  console.log( getMaxSubSum([-1, 2, 3, -9]) ); // 5
  console.log( getMaxSubSum([-1, 2, 3, -9, 11]) ); // 11
  console.log( getMaxSubSum([-2, -1, 1, 2]) ); // 3
  console.log( getMaxSubSum([100, -9, 2, -3, 5]) ); // 100
  console.log( getMaxSubSum([1, 2, 3]) ); // 6
  console.log( getMaxSubSum([-1, -2, -3]) ); // 0



// promise
var pp = new Promise((resolve,reject)=>{
    setTimeout(() =>{
        resolve('-->');
    }, 300);
});

pp.then(value=>{return console.log(value + ' hmm')});

console.log(pp);






//squareroot function
const __sqrt = (n, g) => {    // g is guess number
    if (!g) {  
        g = n / 2.0;
    }
    var d = n / g;         // d is divide
    var ng = (d + g) / 2.0;
    if (g == ng) {          
        return g;
    }
    return __sqrt(n, ng);
}
console.log(__sqrt(25)); 



//egg drop with Math fn, 2 eggs and k floors
//because in trial of 10 floors and 2 eggs we can never exceed more than 4 trials.

const __twoEggDrop = k =>{ 
    return Math.ceil(-1.0 + __sqrt(1 + 8*k)/2.0); 
 } 
 
 var k = 10; 
 console.log("two egg drops", __twoEggDrop(k));   //output : 4



//Egg drop 
const __max = (a,b) =>{
    return (a>b)?a:b;  //returning maximum of two integers
}

const __eggDrop = (n,k)=>{
    var ef = [[n+1],[k+1]];
    var res;
    var i,j,x;

    for(i = 1; i <=n; i++){
        ef[[i],[1]] = 1;
        ef[[i],[0]] = 0;
    }

    for(j = 1; j <= k; j++){
        ef[[1],[j]]=j;

    }

    for(i=2; i<=n; i++){
        for(j=2; j<=k; j++){

            ef[[i],[j]] = Number.MAX_SAFE_INTEGER;
            
            for(x=1; x<=j; x++){
                res = 1 + __max(ef[[i-1],[x-1]], ef[[i],[j-x]]);
                if(res < ef[[i],[j]]){
                    ef[[i],[j]] = res;
                }
            }
        }
    }

    return ef[[n],[k]];

}

var n = 2, k = 36;    // for n:2   k:36   output is 8
console.log("egg droppped: ", __eggDrop(n,k));   //output is 4



//shortest path
const problem = {
    start: {A: 5, B: 2},
    A: {C: 4, D: 2},
    B: {A: 8, D: 7},
    C: {D: 6, finish: 3},
    D: {finish: 1},
    finish: {}
  };
  

const lowestCostNode = (costs, processed) => {

    return Object.keys(costs).reduce((lowest, node) => {
      
      if (lowest === null || costs[node] < costs[lowest]) {
       
        if (!processed.includes(node)) {
          lowest = node;
        }
     
      }

      return lowest;
    }, null);

};



const shortPath = graph => {
    const costs = Object.assign({finish: Infinity}, graph.start);
  
    const parents = {finish: null};
    for (let child in graph.start) {
      parents[child] = 'start';
    }
  
    const processed = [];
  
    let node = lowestCostNode(costs, processed);
  
    while (node) {
      let cost = costs[node];
      let children = graph[node];
      for (let n in children) {
        let newCost = cost + children[n];
        if (!costs[n]) {
          costs[n] = newCost;
          parents[n] = node;
        }
        if (costs[n] > newCost) {
          costs[n] = newCost;
          parents[n] = node;
        }
      }
      processed.push(node);
      node = lowestCostNode(costs, processed);
    }
  
    let optimalPath = ['finish'];
    let parent = parents.finish;
    while (parent) {
      optimalPath.push(parent);
      parent = parents[parent];
    }
    optimalPath.reverse();
  
    const results = {
      distance: costs.finish,
      path: optimalPath
    };
  
    return results;
  };
  
  console.log("shortest path is: ", shortPath(problem));



//Blockchain using javascript
const sha256 = require('js-sha256') // We need sha256 encryption

  class Block {
    constructor(index, timestamp, data, prevHash) {
      this.index = index;
      this.timestamp = timestamp;
      this.data = data;
      this.prevHash = prevHash;
    //   this.thisHash = sha256(
    //     this.index + this.timestamp + this.data + this.prevHash
    //   );
    }
  }
  
  const createGenesisBlock = () => new Block(0, Date.now(), 'Genesis Block', '0');
  
  const nextBlock = (lastBlock, data) =>
    new Block(lastBlock.index + 1, Date.now(), data, lastBlock.thisHash);
  
  const createBlockchain = num => {
    const blockchain = [createGenesisBlock()];
    let previousBlock = blockchain[0];
  
    for (let i = 1; i < num; i += 1) {
      const blockToAdd = nextBlock(previousBlock, `This is block #${i}`);
      blockchain.push(blockToAdd);
      previousBlock = blockToAdd;
    }
    console.log(blockchain);
  };
  
  const lengthToCreate = 3;
  createBlockchain(lengthToCreate);

//hash table
class Node {
    constructor(key, value) {
        this.key = key;
        this.value = value;
        this.next = null;
    }
}

class Table {
    constructor(size) {
        this.cells = new Array(size);
    }

    hash(key) {
        let total = 0;
        for (let i = 0; i < key.length; i++) total += key.charCodeAt(i);
        return total % this.cells.length;
    }

    insert(key, value) {
        const hash = this.hash(key);
        if (!this.cells[hash]) {
            this.cells[hash] = new Node(key, value);
        } else if (this.cells[hash].key === key) {
            this.cells[hash].value = value;
        } else {
            let node = this.cells[hash];
            while (node.next) {
                if (node.next.key === key) {
                    node.next.value = value;
                    return;
                }
                node = node.next;
            }
            node.next = new Node(key, value);
        }
    }

    get(key) {
        const hash = this.hash(key);
        if (!this.cells[hash]) return null;
        else {
            let node = this.cells[hash];
            while (node) {
                if (node.key === key) return node.value;
                node = node.next;
            }
            return null;
        }
    }

    getAll() {
        const table = [];
        for (let i = 0; i < this.cells.length; i++) {
            const cell = [];
            let node = this.cells[i];
            while (node) {
                cell.push(node.value);
                node = node.next;
            }
            table.push(cell);
        }
        return table;
    }
}


const hh = new Table(1,2,4,5,4,7);
console.log(hh);


//binary tree

//Binary tree
//every node value in the left is smaller than the value of the node and value at the right is higher than the value of the root.
class Tree {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }

    insert(value) {
        if (value <= this.value) {
            if (!this.left) this.left = new Tree(value);
            else this.left.insert(value);
        } else {
            if (!this.right) this.right = new Tree(value);
            else this.right.insert(value);
        }
    }

    contains(value) {
        if (value === this.value) return true;
        if (value < this.value) {
            if (!this.left) return false;
            else return this.left.contains(value);
        } else {
            if (!this.right) return false;
            else return this.right.contains(value);
        }
    }

    depthFirstTraverse(order, callback) {
        order === "pre" && callback(this.value);
        this.left && this.left.depthFirstTraverse(order, callback);
        order === "in" && callback(this.value);
        this.right && this.right.depthFirstTraverse(order, callback);
        order === "post" && callback(this.value);
    }

    breadthFirstTraverse(callback) {
        const queue = [this];
        while (queue.length) {
            const root = queue.shift();
            callback(root.value);
            root.left && queue.push(root.left);
            root.right && queue.push(root.right);
        }
    }

    getMinValue() {
        if (this.left) return this.left.getMinValue();
        return this.value;
    }

    getMaxValue() {
        if (this.right) return this.right.getMaxValue();
        return this.value;
    }
}


var tree = new Tree(8,);
// left node because values are lesser than root
tree.insert(1);
tree.insert(2);
tree.insert(3);
tree.insert(4);

// right node because values are greater than root
tree.insert(6);
tree.insert(7);
tree.insert(8);
tree.insert(9);
console.log(tree);

console.log("search value found: ", tree.search(8));

const cb = x =>{ return console.log(x);}
console.log("pre depth first", tree.depthFirstTraverse('pre',cb));